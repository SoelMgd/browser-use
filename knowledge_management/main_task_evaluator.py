"""
Script principal pour l'ex√©cution et l'√©valuation de t√¢ches avec Browser-Use.

Ce script :
1. Ex√©cute une t√¢che avec Browser-Use
2. √âvalue le r√©sultat avec un LLM √©valuateur
3. En cas d'√©chec, r√©essaie avec le guide g√©n√©r√© par l'√©valuateur
4. Sauvegarde les graphs de navigation et les plans de succ√®s
"""

import asyncio
import json
import logging
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import Optional

# Ajouter le chemin du projet
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from dotenv import load_dotenv

# Imports Browser-Use
from browser_use.agent.service import Agent
from browser_use.browser import BrowserProfile, BrowserSession
from browser_use.llm import ChatAnthropic

# Imports locaux
from knowledge_management.utils.history_parser import load_history_from_file, history_to_llm_messages, save_all_screenshots
from knowledge_management.utils.llm_response_parser import parse_llm_evaluation_response, ParsedLLMResponse
from knowledge_management.prompts.graph_generation_prompts import SYSTEM_PROMPT_GRAPH_GENERATION

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Charger les variables d'environnement
load_dotenv()


class TaskEvaluator:
    """Classe principale pour l'√©valuation et l'am√©lioration de t√¢ches"""
    
    def __init__(self, max_attempts: int = 3):
        self.max_attempts = max_attempts
        self.api_key = os.getenv('ANTHROPIC_API_KEY')
        
        if not self.api_key:
            raise ValueError("ANTHROPIC_API_KEY non d√©finie dans les variables d'environnement")
        
        # Initialiser Browser-Use
        self.browser_session = BrowserSession(
            browser_profile=BrowserProfile(
                headless=False,  # True en production
                minimum_wait_page_load_time=3,
                maximum_wait_page_load_time=10,
                viewport={'width': 1280, 'height': 1100},
                user_data_dir='~/.config/browseruse/profiles/default',
            )
        )
        
        # Initialiser le LLM pour Browser-Use
        self.browser_llm = ChatAnthropic(
            model="claude-sonnet-4-20250514",
        )
        
        # Initialiser le LLM √©valuateur
        self.evaluator_llm = ChatAnthropic(
            model="claude-sonnet-4-20250514",
            api_key=self.api_key,
            max_tokens=6000,
            temperature=0.1
        )
        
        # Chemins de sauvegarde
        self.navigation_graphs_dir = Path(__file__).parent / "navigation_graphs"
        self.plans_dir = Path(__file__).parent / "plans"
        self.screenshots_dir = Path(__file__).parent / "screenshots"
        self.tmp_dir = Path(__file__).parent.parent.parent / "tmp"
        
        # Cr√©er les dossiers si n√©cessaire
        self.navigation_graphs_dir.mkdir(exist_ok=True)
        self.plans_dir.mkdir(exist_ok=True)
        self.screenshots_dir.mkdir(exist_ok=True)
        self.tmp_dir.mkdir(exist_ok=True)
    
    def _generate_task_id(self, task: str) -> str:
        """G√©n√®re un ID unique pour la t√¢che"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        task_hash = hash(task) % 10000
        return f"task_{timestamp}_{task_hash}"
    
    def _save_navigation_graph(self, task_id: str, attempt: int, navigation_graph: dict):
        """Sauvegarde le graph de navigation"""
        filename = f"{task_id}_attempt_{attempt}_graph.json"
        filepath = self.navigation_graphs_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(navigation_graph, f, indent=2, ensure_ascii=False)
        
        logger.info(f"üìä Graph de navigation sauvegard√© : {filepath}")
    
    def _save_successful_plan(self, task_id: str, guide: str):
        """Sauvegarde le plan de succ√®s"""
        filename = f"{task_id}_successful_plan.txt"
        filepath = self.plans_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(guide)
        
        logger.info(f"‚úÖ Plan de succ√®s sauvegard√© : {filepath}")
    
    def _build_system_prompt_with_guide(self, guide: str) -> str:
        """Construit un contexte de message enrichi avec le guide"""
        enhanced_context = f"""## A precedent user already tried this task before and let some recommendations that might be helpful.

{guide}

Use this guide to improve your approach."""
        return enhanced_context
    
    async def _evaluate_task_execution(self, history_file: str, task: str) -> ParsedLLMResponse:
        """√âvalue l'ex√©cution d'une t√¢che avec le LLM √©valuateur"""
        try:
            # Charger l'historique
            history_data = load_history_from_file(history_file)
            
            # Convertir en messages LLM
            llm_messages = history_to_llm_messages(history_data)
            
            # Cr√©er le message syst√®me avec la task
            from browser_use.llm.messages import SystemMessage
            enhanced_system_prompt = f"""{SYSTEM_PROMPT_GRAPH_GENERATION}

## The user try to reach this goal:
{task}

Please evaluate the user trajectory for this goal."""
            system_message = SystemMessage(content=enhanced_system_prompt)
            
            # Pr√©parer tous les messages
            all_messages = [system_message] + llm_messages
            
            # Envoyer au LLM √©valuateur
            logger.info("üîç √âvaluation en cours...")
            response = await self.evaluator_llm.ainvoke(all_messages)
            
            # Parser la r√©ponse
            parsed_response = parse_llm_evaluation_response(response.completion)
            
            logger.info(f"üìã √âvaluation termin√©e - Status: {parsed_response.status}")
            return parsed_response
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'√©valuation : {e}")
            raise
    
    async def _execute_task(self, task: str, enhanced_prompt: Optional[str] = None) -> str:
        """Ex√©cute une t√¢che avec Browser-Use"""
        try:
            # Cr√©er l'agent avec le contexte de message personnalis√© si fourni
            agent_kwargs = {
                'task': task,
                'llm': self.browser_llm,
                'browser_session': self.browser_session,
                'validate_output': True,
                'enable_memory': False,
            }
            
            if enhanced_prompt:
                agent_kwargs['message_context'] = enhanced_prompt
            
            agent = Agent(**agent_kwargs)
            
            # Ex√©cuter la t√¢che
            logger.info("üöÄ Ex√©cution de la t√¢che...")
            history = await agent.run(max_steps=25)
            
            # Sauvegarder l'historique
            history_file = self.tmp_dir / "history.json"
            history.save_to_file(str(history_file))
            
            return str(history_file)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'ex√©cution de la t√¢che : {e}")
            raise
    
    async def run_task_with_evaluation(self, task: str) -> dict:
        """
        Ex√©cute une t√¢che avec √©valuation et am√©lioration it√©rative
        
        Args:
            task: La t√¢che √† ex√©cuter
            
        Returns:
            dict: R√©sultats de l'ex√©cution
        """
        task_id = self._generate_task_id(task)
        logger.info(f"üéØ D√©but de l'ex√©cution de la t√¢che : {task_id}")
        logger.info(f"üìù T√¢che : {task}")
        
        results = {
            'task_id': task_id,
            'task': task,
            'attempts': [],
            'final_status': None,
            'successful_plan': None
        }
        
        current_guide = None
        
        for attempt in range(1, self.max_attempts + 1):
            logger.info(f"\nüîÑ Tentative {attempt}/{self.max_attempts}")
            
            try:
                # Construire le contexte de message enrichi si on a un guide
                message_context = None
                if current_guide:
                    message_context = self._build_system_prompt_with_guide(current_guide)
                
                # Ex√©cuter la t√¢che
                history_file = await self._execute_task(task, message_context)
                
                # √âvaluer le r√©sultat
                evaluation = await self._evaluate_task_execution(history_file, task)
                
                # Sauvegarder le graph de navigation
                self._save_navigation_graph(task_id, attempt, evaluation.navigation_graph)
                
                # Sauvegarder les screenshots
                screenshots = self._save_screenshots(task_id, attempt, history_file)
                
                # Enregistrer les r√©sultats de cette tentative
                attempt_result = {
                    'attempt_number': attempt,
                    'status': evaluation.status,
                    'verdict': evaluation.verdict,
                    'guide': evaluation.guide,
                    'navigation_graph_file': f"{task_id}_attempt_{attempt}_graph.json",
                    'screenshots': screenshots
                }
                results['attempts'].append(attempt_result)
                
                logger.info(f"üìä Tentative {attempt} - Status: {evaluation.status}")
                
                # Si succ√®s, sauvegarder le plan et terminer
                if evaluation.status == 'SUCCESS':
                    logger.info("‚úÖ T√¢che accomplie avec succ√®s!")
                    self._save_successful_plan(task_id, evaluation.guide)
                    results['final_status'] = 'SUCCESS'
                    results['successful_plan'] = evaluation.guide
                    break
                
                # Si √©chec, utiliser le guide pour la prochaine tentative
                elif evaluation.status == 'FAILURE':
                    current_guide = evaluation.guide
                    logger.info("‚ö†Ô∏è √âchec d√©tect√©, utilisation du guide pour la prochaine tentative")
                    
                # Si impossible, arr√™ter
                elif evaluation.status == 'IMPOSSIBLE':
                    logger.info("‚ùå T√¢che impossible √† accomplir")
                    results['final_status'] = 'IMPOSSIBLE'
                    break
                
            except Exception as e:
                logger.error(f"‚ùå Erreur lors de la tentative {attempt} : {e}")
                attempt_result = {
                    'attempt_number': attempt,
                    'status': 'ERROR',
                    'error': str(e)
                }
                results['attempts'].append(attempt_result)
        
        # Si toutes les tentatives ont √©chou√©
        if not results['final_status']:
            results['final_status'] = 'FAILURE_AFTER_MAX_ATTEMPTS'
            logger.warning("‚ö†Ô∏è √âchec apr√®s le nombre maximum de tentatives")
        
        return results

    def _save_screenshots(self, task_id: str, attempt: int, history_file: str):
        """Sauvegarde les screenshots de la tentative"""
        try:
            # Charger l'historique
            history_data = load_history_from_file(history_file)
            
            # Cr√©er le dossier pour cette tentative
            screenshots_dir = self.screenshots_dir / f"{task_id}_attempt_{attempt}"
            screenshots_dir.mkdir(exist_ok=True)
            
            # Sauvegarder tous les screenshots
            saved_files = save_all_screenshots(history_data, str(screenshots_dir))
            
            logger.info(f"üì∏ Screenshots sauvegard√©s : {len(saved_files)} images dans {screenshots_dir}")
            return saved_files
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sauvegarde des screenshots : {e}")
            return []


async def main():
    """Fonction principale"""

    CREDENTIALS = """ To login, use the following credentials: {
  username: 'soel@twin.so',
  password: 'Agent123456!',
}"""
    # Configuration
    TASK = """
    "Log in to your Airbnb account, save a Guest Favorite property to your wishlist, and then go to your wishlist and remove the property you previously added.
    Only use http://airbnb.com to achieve the task. Don't go to any other site. The task is achievable with just navigation from this site."
    """

    TASK = TASK + CREDENTIALS
    
    try:
        # Cr√©er l'√©valuateur
        evaluator = TaskEvaluator(max_attempts=3)
        
        # Ex√©cuter la t√¢che avec √©valuation
        results = await evaluator.run_task_with_evaluation(TASK)
        
        # Afficher les r√©sultats finaux
        print("\n" + "="*80)
        print("üéØ R√âSULTATS FINAUX")
        print("="*80)
        print(f"Task ID: {results['task_id']}")
        print(f"Status final: {results['final_status']}")
        print(f"Nombre de tentatives: {len(results['attempts'])}")
        
        if results['successful_plan']:
            print(f"\nüìã Plan de succ√®s sauvegard√© dans: {evaluator.plans_dir}")
        
        print(f"\nüìä Graphs de navigation sauvegard√©s dans: {evaluator.navigation_graphs_dir}")
        print(f"üì∏ Screenshots sauvegard√©s dans: {evaluator.screenshots_dir}")
        
        # Afficher le d√©tail des tentatives
        print(f"\nüìù D√©tail des tentatives:")
        for attempt in results['attempts']:
            print(f"  Tentative {attempt['attempt_number']}: {attempt['status']}")
            if 'verdict' in attempt:
                print(f"    Verdict: {attempt['verdict'][:100]}...")
            if 'screenshots' in attempt and attempt['screenshots']:
                print(f"    Screenshots: {len(attempt['screenshots'])} images sauvegard√©es")
        
    except Exception as e:
        logger.error(f"‚ùå Erreur dans main : {e}", exc_info=True)


if __name__ == "__main__":
    asyncio.run(main()) 